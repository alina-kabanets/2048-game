{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAQI,EARE,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAQ,SAAS,aAAa,CAAC,eAC/B,EAAS,SAAS,aAAa,CAAC,WAKlC,EAAa,EACb,EAAM,CAAA,EAkBV,SAAS,IACP,EAAQ,CACN,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAED,IACA,GACF,CAEA,SAAS,IACP,IAAK,IAAI,EAAI,EAAG,EAnCL,EAmCe,IACxB,IAAK,IAAI,EAAI,EAAG,EAnCJ,EAmCiB,IAC3B,GAAI,AAAgB,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,CACb,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,CA0BA,SAAS,IACP,EAAM,OAAO,CAAC,SAAC,CAAA,CAAK,CAApB,EACE,EAAI,OAAO,CAAC,SAAC,CAAA,CAAM,CAAnB,EACE,IAAM,EAAO,SAAS,cAAc,CAAC,EAAE,QAAQ,GAAK,IAAM,EAAE,QAAQ,GAEpE,CAAA,EAAK,SAAS,CAAG,GACjB,EAAK,SAAS,CAAC,KAAK,CAAG,GACvB,EAAK,SAAS,CAAC,GAAG,CAAC,cACnB,EAAM,SAAS,CAAG,EAClB,EAAa,CACf,EACF,EACF,CAEA,SAAS,IACP,GAAK,KAOL,IAHA,IAAI,EAAQ,CAAA,EACN,EAAO,AAAgB,GAAhB,K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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar messageStart = document.querySelector(\".message-start\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar messageWin = document.querySelector(\".message-win\");\nvar score = document.querySelector(\".game-score\");\nvar button = document.querySelector(\".button\");\nvar rows = 4;\nvar columns = 4;\nvar board;\nvar scoreCount = 0;\nvar won = false;\nbutton.addEventListener(\"click\", function(e) {\n    messageStart.classList.add(\"hidden\");\n    button.innerText = \"Restart\";\n    button.classList.replace(\"start\", \"restart\");\n    setGame();\n});\nbutton.addEventListener(\"click\", function(e) {\n    messageWin.classList.add(\"hidden\");\n    won = false;\n    clearBoard();\n    setGame();\n});\nfunction setGame() {\n    board = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    setTile();\n    setTile();\n}\nfunction hasEmptyTile() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (board[r][c] === 0) return true;\n    }\n    return false;\n}\nfunction loseGame() {\n    if (hasEmptyTile()) return false;\n    for(var i = 0; i < rows; i++)for(var j = 0; j < rows; j++){\n        if (board[i][j] === board[i][j + 1]) return false;\n    }\n    for(var i1 = 0; i1 < rows - 1; i1++)for(var j1 = 0; j1 < rows; j1++){\n        if (board[i1][j1] === board[i1 + 1][j1]) return false;\n    }\n    return true;\n}\nfunction clearBoard() {\n    board.forEach(function(row, r) {\n        row.forEach(function(cell, c) {\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            tile.innerText = \"\";\n            tile.classList.value = \"\";\n            tile.classList.add(\"field-cell\");\n            score.innerText = 0;\n            scoreCount = 0;\n        });\n    });\n}\nfunction setTile() {\n    if (!hasEmptyTile()) return;\n    var found = false;\n    var numb = Math.random() < 0.9 ? 2 : 4;\n    while(!found){\n        var r = Math.floor(Math.random() * rows);\n        var c = Math.floor(Math.random() * columns);\n        if (board[r][c] === 0) {\n            board[r][c] = numb;\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            tile.innerText = \"\".concat(numb);\n            tile.classList.add(\"field-cell--\" + numb.toString());\n            found = true;\n        }\n    }\n    if (loseGame()) {\n        messageLose.classList.remove(\"hidden\");\n        button.addEventListener(\"click\", function() {\n            messageLose.classList.add(\"hidden\");\n            clearBoard();\n            setGame();\n        });\n    }\n}\nfunction updateTile(r, c) {\n    var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n    var num = board[r][c];\n    tile.innerText = \"\";\n    tile.classList.value = \"\";\n    tile.classList.add(\"field-cell\");\n    if (num > 0) {\n        tile.innerText = num.toString();\n        tile.classList.add(\"field-cell--\" + num.toString());\n    }\n    if (num === 2048) {\n        messageWin.classList.remove(\"hidden\");\n        won = true;\n    }\n}\ndocument.addEventListener(\"keyup\", function(e) {\n    e.preventDefault();\n    if (won) return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            slideLeft();\n            break;\n        case \"ArrowRight\":\n            slideRight();\n            break;\n        case \"ArrowUp\":\n            slideUp();\n            break;\n        case \"ArrowDown\":\n            slideDown();\n            break;\n    }\n});\nfunction filterZero(row) {\n    return row.filter(function(num) {\n        return num !== 0;\n    });\n}\nfunction slide(newRow) {\n    var row = newRow;\n    row = filterZero(row);\n    for(var i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1]) {\n        row[i] *= 2;\n        row[i + 1] = 0;\n        scoreCount += row[i];\n        score.innerText = scoreCount;\n    }\n    row = filterZero(row);\n    while(row.length < columns)row.push(0);\n    return row;\n}\nfunction slideLeft() {\n    var initialBoard = board.map(function(row) {\n        return _to_consumable_array(row);\n    });\n    for(var r = 0; r < rows; r++){\n        var row = board[r];\n        row = slide(row);\n        board[r] = row;\n        for(var c = 0; c < columns; c++)updateTile(r, c);\n    }\n    if (hasChanges(initialBoard, board)) setTile();\n}\nfunction slideRight() {\n    var initialBoard = board.map(function(row) {\n        return _to_consumable_array(row);\n    });\n    for(var r = 0; r < rows; r++){\n        var row = board[r];\n        row.reverse();\n        row = slide(row);\n        board[r] = row.reverse();\n        for(var c = 0; c < columns; c++)updateTile(r, c);\n    }\n    if (hasChanges(initialBoard, board)) setTile();\n}\nfunction slideUp() {\n    var initialBoard = board.map(function(row) {\n        return _to_consumable_array(row);\n    });\n    for(var c = 0; c < columns; c++){\n        var row = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ];\n        row = slide(row);\n        for(var r = 0; r < rows; r++){\n            board[r][c] = row[r];\n            updateTile(r, c);\n        }\n    }\n    if (hasChanges(initialBoard, board)) setTile();\n}\nfunction slideDown() {\n    var initialBoard = board.map(function(row) {\n        return _to_consumable_array(row);\n    });\n    for(var c = 0; c < columns; c++){\n        var row = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ];\n        row.reverse();\n        row = slide(row);\n        row.reverse();\n        for(var r = 0; r < rows; r++){\n            board[r][c] = row[r];\n            updateTile(r, c);\n        }\n    }\n    if (hasChanges(initialBoard, board)) setTile();\n}\nfunction hasChanges(arrayA, arrayB) {\n    for(var i = 0; i < arrayA.length; i++)for(var j = 0; j < arrayA[i].length; j++){\n        if (arrayA[i][j] !== arrayB[i][j]) return true;\n    }\n    return false;\n}\n\n//# sourceMappingURL=index.1a8bb56b.js.map\n","'use strict';\n\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst score = document.querySelector('.game-score');\nconst button = document.querySelector('.button');\n\nconst rows = 4;\nconst columns = 4;\nlet board;\nlet scoreCount = 0;\nlet won = false;\n\nbutton.addEventListener('click', (e) => {\n  messageStart.classList.add('hidden');\n  button.innerText = 'Restart';\n  button.classList.replace('start', 'restart');\n\n  setGame();\n});\n\nbutton.addEventListener('click', (e) => {\n  messageWin.classList.add('hidden');\n  won = false;\n\n  clearBoard();\n  setGame();\n});\n\nfunction setGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  setTile();\n  setTile();\n}\n\nfunction hasEmptyTile() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction loseGame() {\n  if (hasEmptyTile()) {\n    return false;\n  }\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < rows; j++) {\n      if (board[i][j] === board[i][j + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let i = 0; i < rows - 1; i++) {\n    for (let j = 0; j < rows; j++) {\n      if (board[i][j] === board[i + 1][j]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction clearBoard() {\n  board.forEach((row, r) => {\n    row.forEach((cell, c) => {\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n      tile.innerText = '';\n      tile.classList.value = '';\n      tile.classList.add('field-cell');\n      score.innerText = 0;\n      scoreCount = 0;\n    });\n  });\n}\n\nfunction setTile() {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let found = false;\n  const numb = Math.random() < 0.9 ? 2 : 4;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      board[r][c] = numb;\n\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n      tile.innerText = `${numb}`;\n      tile.classList.add('field-cell--' + numb.toString());\n      found = true;\n    }\n  }\n\n  if (loseGame()) {\n    messageLose.classList.remove('hidden');\n\n    button.addEventListener('click', () => {\n      messageLose.classList.add('hidden');\n\n      clearBoard();\n      setGame();\n    });\n  }\n}\n\nfunction updateTile(r, c) {\n  const tile = document.getElementById(r.toString() + '-' + c.toString());\n  const num = board[r][c];\n\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('field-cell');\n\n  if (num > 0) {\n    tile.innerText = num.toString();\n    tile.classList.add('field-cell' + '--' + num.toString());\n  }\n\n  if (num === 2048) {\n    messageWin.classList.remove('hidden');\n    won = true;\n  }\n}\n\ndocument.addEventListener('keyup', (e) => {\n  e.preventDefault();\n\n  if (won) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      slideLeft();\n      break;\n    case 'ArrowRight':\n      slideRight();\n      break;\n    case 'ArrowUp':\n      slideUp();\n      break;\n    case 'ArrowDown':\n      slideDown();\n      break;\n  }\n});\n\nfunction filterZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(newRow) {\n  let row = newRow;\n\n  row = filterZero(row);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (row[i] === row[i + 1]) {\n      row[i] *= 2;\n      row[i + 1] = 0;\n      scoreCount += row[i];\n      score.innerText = scoreCount;\n    }\n  }\n\n  row = filterZero(row);\n\n  while (row.length < columns) {\n    row.push(0);\n  }\n\n  return row;\n}\n\nfunction slideLeft() {\n  const initialBoard = board.map(row => [...row]);\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row = slide(row);\n    board[r] = row;\n\n    for (let c = 0; c < columns; c++) {\n      updateTile(r, c);\n    }\n  }\n\n  if (hasChanges(initialBoard, board)) {\n    setTile();\n  }\n}\n\nfunction slideRight() {\n  const initialBoard = board.map(row => [...row]);\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row.reverse();\n    row = slide(row);\n    board[r] = row.reverse();\n\n    for (let c = 0; c < columns; c++) {\n      updateTile(r, c);\n    }\n  }\n\n  if (hasChanges(initialBoard, board)) {\n    setTile();\n  }\n}\n\nfunction slideUp() {\n  const initialBoard = board.map(row => [...row]);\n\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row = slide(row);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      updateTile(r, c);\n    }\n  }\n\n  if (hasChanges(initialBoard, board)) {\n    setTile();\n  }\n}\n\nfunction slideDown() {\n  const initialBoard = board.map(row => [...row]);\n\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      updateTile(r, c);\n    }\n  }\n\n  if (hasChanges(initialBoard, board)) {\n    setTile();\n  }\n}\n\nfunction hasChanges(arrayA, arrayB) {\n  for (let i = 0; i < arrayA.length; i++) {\n    for (let j = 0; j < arrayA[i].length; j++) {\n      if (arrayA[i][j] !== arrayB[i][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","board","messageStart","document","querySelector","messageLose","messageWin","score","button","scoreCount","won","setGame","setTile","hasEmptyTile","r","c","clearBoard","forEach","row","cell","tile","getElementById","innerText","classList","value","add","found","numb","Math","random","floor","concat","loseGame","j","i1","rows","j1","remove","addEventListener","updateTile","num","filterZero","filter","slide","newRow","push","hasChanges","arrayA","arrayB","e","replace","preventDefault","key","slideLeft","initialBoard","map","slideRight","reverse","slideUp","slideDown"],"version":3,"file":"index.1a8bb56b.js.map"}